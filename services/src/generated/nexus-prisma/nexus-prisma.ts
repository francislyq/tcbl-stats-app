/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Link: LinkObject
      User: UserObject
      Vote: VoteObject
      LinkConnection: LinkConnectionObject
      PageInfo: PageInfoObject
      LinkEdge: LinkEdgeObject
      AggregateLink: AggregateLinkObject
      UserConnection: UserConnectionObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      VoteConnection: VoteConnectionObject
      VoteEdge: VoteEdgeObject
      AggregateVote: AggregateVoteObject
      Player: PlayerObject
      Team: TeamObject
      PlayerConnection: PlayerConnectionObject
      PlayerEdge: PlayerEdgeObject
      AggregatePlayer: AggregatePlayerObject
      TeamConnection: TeamConnectionObject
      TeamEdge: TeamEdgeObject
      AggregateTeam: AggregateTeamObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      LinkSubscriptionPayload: LinkSubscriptionPayloadObject
      LinkPreviousValues: LinkPreviousValuesObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      VoteSubscriptionPayload: VoteSubscriptionPayloadObject
      VotePreviousValues: VotePreviousValuesObject
      PlayerSubscriptionPayload: PlayerSubscriptionPayloadObject
      PlayerPreviousValues: PlayerPreviousValuesObject
      TeamSubscriptionPayload: TeamSubscriptionPayloadObject
      TeamPreviousValues: TeamPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Link: LinkFieldDetails
      User: UserFieldDetails
      Vote: VoteFieldDetails
      LinkConnection: LinkConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      LinkEdge: LinkEdgeFieldDetails
      AggregateLink: AggregateLinkFieldDetails
      UserConnection: UserConnectionFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      VoteConnection: VoteConnectionFieldDetails
      VoteEdge: VoteEdgeFieldDetails
      AggregateVote: AggregateVoteFieldDetails
      Player: PlayerFieldDetails
      Team: TeamFieldDetails
      PlayerConnection: PlayerConnectionFieldDetails
      PlayerEdge: PlayerEdgeFieldDetails
      AggregatePlayer: AggregatePlayerFieldDetails
      TeamConnection: TeamConnectionFieldDetails
      TeamEdge: TeamEdgeFieldDetails
      AggregateTeam: AggregateTeamFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      LinkSubscriptionPayload: LinkSubscriptionPayloadFieldDetails
      LinkPreviousValues: LinkPreviousValuesFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      VoteSubscriptionPayload: VoteSubscriptionPayloadFieldDetails
      VotePreviousValues: VotePreviousValuesFieldDetails
      PlayerSubscriptionPayload: PlayerSubscriptionPayloadFieldDetails
      PlayerPreviousValues: PlayerPreviousValuesFieldDetails
      TeamSubscriptionPayload: TeamSubscriptionPayloadFieldDetails
      TeamPreviousValues: TeamPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      LinkWhereUniqueInput: LinkWhereUniqueInputInputObject
      LinkWhereInput: LinkWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      VoteWhereInput: VoteWhereInputInputObject
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      VoteWhereUniqueInput: VoteWhereUniqueInputInputObject
      PlayerWhereUniqueInput: PlayerWhereUniqueInputInputObject
      TeamWhereInput: TeamWhereInputInputObject
      PlayerWhereInput: PlayerWhereInputInputObject
      TeamWhereUniqueInput: TeamWhereUniqueInputInputObject
      LinkCreateInput: LinkCreateInputInputObject
      UserCreateOneWithoutLinksInput: UserCreateOneWithoutLinksInputInputObject
      UserCreateWithoutLinksInput: UserCreateWithoutLinksInputInputObject
      VoteCreateManyWithoutUserInput: VoteCreateManyWithoutUserInputInputObject
      VoteCreateWithoutUserInput: VoteCreateWithoutUserInputInputObject
      LinkCreateOneWithoutVotesInput: LinkCreateOneWithoutVotesInputInputObject
      LinkCreateWithoutVotesInput: LinkCreateWithoutVotesInputInputObject
      VoteCreateManyWithoutLinkInput: VoteCreateManyWithoutLinkInputInputObject
      VoteCreateWithoutLinkInput: VoteCreateWithoutLinkInputInputObject
      UserCreateOneWithoutVotesInput: UserCreateOneWithoutVotesInputInputObject
      UserCreateWithoutVotesInput: UserCreateWithoutVotesInputInputObject
      LinkCreateManyWithoutPostedByInput: LinkCreateManyWithoutPostedByInputInputObject
      LinkCreateWithoutPostedByInput: LinkCreateWithoutPostedByInputInputObject
      LinkUpdateInput: LinkUpdateInputInputObject
      UserUpdateOneWithoutLinksInput: UserUpdateOneWithoutLinksInputInputObject
      UserUpdateWithoutLinksDataInput: UserUpdateWithoutLinksDataInputInputObject
      VoteUpdateManyWithoutUserInput: VoteUpdateManyWithoutUserInputInputObject
      VoteUpdateWithWhereUniqueWithoutUserInput: VoteUpdateWithWhereUniqueWithoutUserInputInputObject
      VoteUpdateWithoutUserDataInput: VoteUpdateWithoutUserDataInputInputObject
      LinkUpdateOneRequiredWithoutVotesInput: LinkUpdateOneRequiredWithoutVotesInputInputObject
      LinkUpdateWithoutVotesDataInput: LinkUpdateWithoutVotesDataInputInputObject
      LinkUpsertWithoutVotesInput: LinkUpsertWithoutVotesInputInputObject
      VoteUpsertWithWhereUniqueWithoutUserInput: VoteUpsertWithWhereUniqueWithoutUserInputInputObject
      VoteScalarWhereInput: VoteScalarWhereInputInputObject
      UserUpsertWithoutLinksInput: UserUpsertWithoutLinksInputInputObject
      VoteUpdateManyWithoutLinkInput: VoteUpdateManyWithoutLinkInputInputObject
      VoteUpdateWithWhereUniqueWithoutLinkInput: VoteUpdateWithWhereUniqueWithoutLinkInputInputObject
      VoteUpdateWithoutLinkDataInput: VoteUpdateWithoutLinkDataInputInputObject
      UserUpdateOneRequiredWithoutVotesInput: UserUpdateOneRequiredWithoutVotesInputInputObject
      UserUpdateWithoutVotesDataInput: UserUpdateWithoutVotesDataInputInputObject
      LinkUpdateManyWithoutPostedByInput: LinkUpdateManyWithoutPostedByInputInputObject
      LinkUpdateWithWhereUniqueWithoutPostedByInput: LinkUpdateWithWhereUniqueWithoutPostedByInputInputObject
      LinkUpdateWithoutPostedByDataInput: LinkUpdateWithoutPostedByDataInputInputObject
      LinkUpsertWithWhereUniqueWithoutPostedByInput: LinkUpsertWithWhereUniqueWithoutPostedByInputInputObject
      LinkScalarWhereInput: LinkScalarWhereInputInputObject
      LinkUpdateManyWithWhereNestedInput: LinkUpdateManyWithWhereNestedInputInputObject
      LinkUpdateManyDataInput: LinkUpdateManyDataInputInputObject
      UserUpsertWithoutVotesInput: UserUpsertWithoutVotesInputInputObject
      VoteUpsertWithWhereUniqueWithoutLinkInput: VoteUpsertWithWhereUniqueWithoutLinkInputInputObject
      LinkUpdateManyMutationInput: LinkUpdateManyMutationInputInputObject
      UserCreateInput: UserCreateInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      VoteCreateInput: VoteCreateInputInputObject
      VoteUpdateInput: VoteUpdateInputInputObject
      PlayerCreateInput: PlayerCreateInputInputObject
      TeamCreateManyWithoutPlayersInput: TeamCreateManyWithoutPlayersInputInputObject
      TeamCreateWithoutPlayersInput: TeamCreateWithoutPlayersInputInputObject
      PlayerUpdateInput: PlayerUpdateInputInputObject
      TeamUpdateManyWithoutPlayersInput: TeamUpdateManyWithoutPlayersInputInputObject
      TeamUpdateWithWhereUniqueWithoutPlayersInput: TeamUpdateWithWhereUniqueWithoutPlayersInputInputObject
      TeamUpdateWithoutPlayersDataInput: TeamUpdateWithoutPlayersDataInputInputObject
      TeamUpsertWithWhereUniqueWithoutPlayersInput: TeamUpsertWithWhereUniqueWithoutPlayersInputInputObject
      TeamScalarWhereInput: TeamScalarWhereInputInputObject
      TeamUpdateManyWithWhereNestedInput: TeamUpdateManyWithWhereNestedInputInputObject
      TeamUpdateManyDataInput: TeamUpdateManyDataInputInputObject
      PlayerUpdateManyMutationInput: PlayerUpdateManyMutationInputInputObject
      TeamCreateInput: TeamCreateInputInputObject
      PlayerCreateManyWithoutTeamsInput: PlayerCreateManyWithoutTeamsInputInputObject
      PlayerCreateWithoutTeamsInput: PlayerCreateWithoutTeamsInputInputObject
      TeamUpdateInput: TeamUpdateInputInputObject
      PlayerUpdateManyWithoutTeamsInput: PlayerUpdateManyWithoutTeamsInputInputObject
      PlayerUpdateWithWhereUniqueWithoutTeamsInput: PlayerUpdateWithWhereUniqueWithoutTeamsInputInputObject
      PlayerUpdateWithoutTeamsDataInput: PlayerUpdateWithoutTeamsDataInputInputObject
      PlayerUpsertWithWhereUniqueWithoutTeamsInput: PlayerUpsertWithWhereUniqueWithoutTeamsInputInputObject
      PlayerScalarWhereInput: PlayerScalarWhereInputInputObject
      PlayerUpdateManyWithWhereNestedInput: PlayerUpdateManyWithWhereNestedInputInputObject
      PlayerUpdateManyDataInput: PlayerUpdateManyDataInputInputObject
      TeamUpdateManyMutationInput: TeamUpdateManyMutationInputInputObject
      LinkSubscriptionWhereInput: LinkSubscriptionWhereInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      VoteSubscriptionWhereInput: VoteSubscriptionWhereInputInputObject
      PlayerSubscriptionWhereInput: PlayerSubscriptionWhereInputInputObject
      TeamSubscriptionWhereInput: TeamSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    LinkOrderByInput: LinkOrderByInputValues,
    VoteOrderByInput: VoteOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    TeamOrderByInput: TeamOrderByInputValues,
    PlayerOrderByInput: PlayerOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'link', args?: QueryLinkArgs[] | false, alias?: string  } 
  | { name: 'links', args?: QueryLinksArgs[] | false, alias?: string  } 
  | { name: 'linksConnection', args?: QueryLinksConnectionArgs[] | false, alias?: string  } 
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'vote', args?: QueryVoteArgs[] | false, alias?: string  } 
  | { name: 'votes', args?: QueryVotesArgs[] | false, alias?: string  } 
  | { name: 'votesConnection', args?: QueryVotesConnectionArgs[] | false, alias?: string  } 
  | { name: 'player', args?: QueryPlayerArgs[] | false, alias?: string  } 
  | { name: 'players', args?: QueryPlayersArgs[] | false, alias?: string  } 
  | { name: 'playersConnection', args?: QueryPlayersConnectionArgs[] | false, alias?: string  } 
  | { name: 'team', args?: QueryTeamArgs[] | false, alias?: string  } 
  | { name: 'teams', args?: QueryTeamsArgs[] | false, alias?: string  } 
  | { name: 'teamsConnection', args?: QueryTeamsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'link'
  | 'links'
  | 'linksConnection'
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'vote'
  | 'votes'
  | 'votesConnection'
  | 'player'
  | 'players'
  | 'playersConnection'
  | 'team'
  | 'teams'
  | 'teamsConnection'


type QueryLinkArgs =
  | 'where'
type QueryLinksArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryLinksConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryVoteArgs =
  | 'where'
type QueryVotesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryVotesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPlayerArgs =
  | 'where'
type QueryPlayersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPlayersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTeamArgs =
  | 'where'
type QueryTeamsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTeamsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  link: {
    type: 'Link'
    args: Record<QueryLinkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: LinkWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Link | null> | prisma.Link | null
  }
  links: {
    type: 'Link'
    args: Record<QueryLinksArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: LinkWhereInput | null, orderBy?: prisma.LinkOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Link[]> | prisma.Link[]
  }
  linksConnection: {
    type: 'LinkConnection'
    args: Record<QueryLinksConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: LinkWhereInput | null, orderBy?: prisma.LinkOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LinkConnection> | prisma.LinkConnection
  }
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  vote: {
    type: 'Vote'
    args: Record<QueryVoteArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: VoteWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Vote | null> | prisma.Vote | null
  }
  votes: {
    type: 'Vote'
    args: Record<QueryVotesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: VoteWhereInput | null, orderBy?: prisma.VoteOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Vote[]> | prisma.Vote[]
  }
  votesConnection: {
    type: 'VoteConnection'
    args: Record<QueryVotesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: VoteWhereInput | null, orderBy?: prisma.VoteOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VoteConnection> | prisma.VoteConnection
  }
  player: {
    type: 'Player'
    args: Record<QueryPlayerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PlayerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player | null> | prisma.Player | null
  }
  players: {
    type: 'Player'
    args: Record<QueryPlayersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PlayerWhereInput | null, orderBy?: prisma.PlayerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player[]> | prisma.Player[]
  }
  playersConnection: {
    type: 'PlayerConnection'
    args: Record<QueryPlayersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PlayerWhereInput | null, orderBy?: prisma.PlayerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PlayerConnection> | prisma.PlayerConnection
  }
  team: {
    type: 'Team'
    args: Record<QueryTeamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TeamWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team | null> | prisma.Team | null
  }
  teams: {
    type: 'Team'
    args: Record<QueryTeamsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TeamWhereInput | null, orderBy?: prisma.TeamOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team[]> | prisma.Team[]
  }
  teamsConnection: {
    type: 'TeamConnection'
    args: Record<QueryTeamsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TeamWhereInput | null, orderBy?: prisma.TeamOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamConnection> | prisma.TeamConnection
  }
}
  

// Types for Link

type LinkObject =
  | LinkFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'url', args?: [] | false, alias?: string  } 
  | { name: 'postedBy', args?: [] | false, alias?: string  } 
  | { name: 'votes', args?: LinkVotesArgs[] | false, alias?: string  } 

type LinkFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'description'
  | 'url'
  | 'postedBy'
  | 'votes'


type LinkVotesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface LinkFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  postedBy: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Link">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  votes: {
    type: 'Vote'
    args: Record<LinkVotesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Link">,
      args: { where?: VoteWhereInput | null, orderBy?: prisma.VoteOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Vote[]> | prisma.Vote[]
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'links', args?: UserLinksArgs[] | false, alias?: string  } 
  | { name: 'votes', args?: UserVotesArgs[] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'name'
  | 'email'
  | 'password'
  | 'links'
  | 'votes'


type UserLinksArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserVotesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  links: {
    type: 'Link'
    args: Record<UserLinksArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: LinkWhereInput | null, orderBy?: prisma.LinkOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Link[]> | prisma.Link[]
  }
  votes: {
    type: 'Vote'
    args: Record<UserVotesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: VoteWhereInput | null, orderBy?: prisma.VoteOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Vote[]> | prisma.Vote[]
  }
}
  

// Types for Vote

type VoteObject =
  | VoteFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'link', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 

type VoteFields =
  | 'id'
  | 'link'
  | 'user'



  

export interface VoteFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  link: {
    type: 'Link'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Vote">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Link> | prisma.Link
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Vote">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
}
  

// Types for LinkConnection

type LinkConnectionObject =
  | LinkConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type LinkConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface LinkConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LinkConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'LinkEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"LinkConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LinkEdge[]> | prisma.LinkEdge[]
  }
  aggregate: {
    type: 'AggregateLink'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LinkConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateLink> | prisma.AggregateLink
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for LinkEdge

type LinkEdgeObject =
  | LinkEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type LinkEdgeFields =
  | 'node'
  | 'cursor'



  

export interface LinkEdgeFieldDetails {
  node: {
    type: 'Link'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LinkEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Link> | prisma.Link
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateLink

type AggregateLinkObject =
  | AggregateLinkFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateLinkFields =
  | 'count'



  

export interface AggregateLinkFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for VoteConnection

type VoteConnectionObject =
  | VoteConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type VoteConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface VoteConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VoteConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'VoteEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"VoteConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VoteEdge[]> | prisma.VoteEdge[]
  }
  aggregate: {
    type: 'AggregateVote'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VoteConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateVote> | prisma.AggregateVote
  }
}
  

// Types for VoteEdge

type VoteEdgeObject =
  | VoteEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type VoteEdgeFields =
  | 'node'
  | 'cursor'



  

export interface VoteEdgeFieldDetails {
  node: {
    type: 'Vote'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VoteEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Vote> | prisma.Vote
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateVote

type AggregateVoteObject =
  | AggregateVoteFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateVoteFields =
  | 'count'



  

export interface AggregateVoteFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Player

type PlayerObject =
  | PlayerFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'firstName', args?: [] | false, alias?: string  } 
  | { name: 'lastName', args?: [] | false, alias?: string  } 
  | { name: 'number', args?: [] | false, alias?: string  } 
  | { name: 'teams', args?: PlayerTeamsArgs[] | false, alias?: string  } 

type PlayerFields =
  | 'id'
  | 'firstName'
  | 'lastName'
  | 'number'
  | 'teams'


type PlayerTeamsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface PlayerFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  firstName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  lastName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  number: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  teams: {
    type: 'Team'
    args: Record<PlayerTeamsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Player">,
      args: { where?: TeamWhereInput | null, orderBy?: prisma.TeamOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team[]> | prisma.Team[]
  }
}
  

// Types for Team

type TeamObject =
  | TeamFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'players', args?: TeamPlayersArgs[] | false, alias?: string  } 

type TeamFields =
  | 'id'
  | 'name'
  | 'players'


type TeamPlayersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface TeamFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  players: {
    type: 'Player'
    args: Record<TeamPlayersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Team">,
      args: { where?: PlayerWhereInput | null, orderBy?: prisma.PlayerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player[]> | prisma.Player[]
  }
}
  

// Types for PlayerConnection

type PlayerConnectionObject =
  | PlayerConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PlayerConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PlayerConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PlayerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PlayerEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PlayerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PlayerEdge[]> | prisma.PlayerEdge[]
  }
  aggregate: {
    type: 'AggregatePlayer'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PlayerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePlayer> | prisma.AggregatePlayer
  }
}
  

// Types for PlayerEdge

type PlayerEdgeObject =
  | PlayerEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PlayerEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PlayerEdgeFieldDetails {
  node: {
    type: 'Player'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PlayerEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player> | prisma.Player
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePlayer

type AggregatePlayerObject =
  | AggregatePlayerFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePlayerFields =
  | 'count'



  

export interface AggregatePlayerFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TeamConnection

type TeamConnectionObject =
  | TeamConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TeamConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TeamConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TeamConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TeamEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TeamConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamEdge[]> | prisma.TeamEdge[]
  }
  aggregate: {
    type: 'AggregateTeam'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TeamConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTeam> | prisma.AggregateTeam
  }
}
  

// Types for TeamEdge

type TeamEdgeObject =
  | TeamEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TeamEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TeamEdgeFieldDetails {
  node: {
    type: 'Team'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TeamEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team> | prisma.Team
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTeam

type AggregateTeamObject =
  | AggregateTeamFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTeamFields =
  | 'count'



  

export interface AggregateTeamFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createLink', args?: MutationCreateLinkArgs[] | false, alias?: string  } 
  | { name: 'updateLink', args?: MutationUpdateLinkArgs[] | false, alias?: string  } 
  | { name: 'updateManyLinks', args?: MutationUpdateManyLinksArgs[] | false, alias?: string  } 
  | { name: 'upsertLink', args?: MutationUpsertLinkArgs[] | false, alias?: string  } 
  | { name: 'deleteLink', args?: MutationDeleteLinkArgs[] | false, alias?: string  } 
  | { name: 'deleteManyLinks', args?: MutationDeleteManyLinksArgs[] | false, alias?: string  } 
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createVote', args?: MutationCreateVoteArgs[] | false, alias?: string  } 
  | { name: 'updateVote', args?: MutationUpdateVoteArgs[] | false, alias?: string  } 
  | { name: 'upsertVote', args?: MutationUpsertVoteArgs[] | false, alias?: string  } 
  | { name: 'deleteVote', args?: MutationDeleteVoteArgs[] | false, alias?: string  } 
  | { name: 'deleteManyVotes', args?: MutationDeleteManyVotesArgs[] | false, alias?: string  } 
  | { name: 'createPlayer', args?: MutationCreatePlayerArgs[] | false, alias?: string  } 
  | { name: 'updatePlayer', args?: MutationUpdatePlayerArgs[] | false, alias?: string  } 
  | { name: 'updateManyPlayers', args?: MutationUpdateManyPlayersArgs[] | false, alias?: string  } 
  | { name: 'upsertPlayer', args?: MutationUpsertPlayerArgs[] | false, alias?: string  } 
  | { name: 'deletePlayer', args?: MutationDeletePlayerArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPlayers', args?: MutationDeleteManyPlayersArgs[] | false, alias?: string  } 
  | { name: 'createTeam', args?: MutationCreateTeamArgs[] | false, alias?: string  } 
  | { name: 'updateTeam', args?: MutationUpdateTeamArgs[] | false, alias?: string  } 
  | { name: 'updateManyTeams', args?: MutationUpdateManyTeamsArgs[] | false, alias?: string  } 
  | { name: 'upsertTeam', args?: MutationUpsertTeamArgs[] | false, alias?: string  } 
  | { name: 'deleteTeam', args?: MutationDeleteTeamArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTeams', args?: MutationDeleteManyTeamsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createLink'
  | 'updateLink'
  | 'updateManyLinks'
  | 'upsertLink'
  | 'deleteLink'
  | 'deleteManyLinks'
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createVote'
  | 'updateVote'
  | 'upsertVote'
  | 'deleteVote'
  | 'deleteManyVotes'
  | 'createPlayer'
  | 'updatePlayer'
  | 'updateManyPlayers'
  | 'upsertPlayer'
  | 'deletePlayer'
  | 'deleteManyPlayers'
  | 'createTeam'
  | 'updateTeam'
  | 'updateManyTeams'
  | 'upsertTeam'
  | 'deleteTeam'
  | 'deleteManyTeams'


type MutationCreateLinkArgs =
  | 'data'
type MutationUpdateLinkArgs =
  | 'data'
  | 'where'
type MutationUpdateManyLinksArgs =
  | 'data'
  | 'where'
type MutationUpsertLinkArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteLinkArgs =
  | 'where'
type MutationDeleteManyLinksArgs =
  | 'where'
type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateVoteArgs =
  | 'data'
type MutationUpdateVoteArgs =
  | 'data'
  | 'where'
type MutationUpsertVoteArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteVoteArgs =
  | 'where'
type MutationDeleteManyVotesArgs =
  | 'where'
type MutationCreatePlayerArgs =
  | 'data'
type MutationUpdatePlayerArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPlayersArgs =
  | 'data'
  | 'where'
type MutationUpsertPlayerArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePlayerArgs =
  | 'where'
type MutationDeleteManyPlayersArgs =
  | 'where'
type MutationCreateTeamArgs =
  | 'data'
type MutationUpdateTeamArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTeamsArgs =
  | 'data'
  | 'where'
type MutationUpsertTeamArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTeamArgs =
  | 'where'
type MutationDeleteManyTeamsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createLink: {
    type: 'Link'
    args: Record<MutationCreateLinkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LinkCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Link> | prisma.Link
  }
  updateLink: {
    type: 'Link'
    args: Record<MutationUpdateLinkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LinkUpdateInput, where: LinkWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Link | null> | prisma.Link | null
  }
  updateManyLinks: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyLinksArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LinkUpdateManyMutationInput, where?: LinkWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertLink: {
    type: 'Link'
    args: Record<MutationUpsertLinkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: LinkWhereUniqueInput, create: LinkCreateInput, update: LinkUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Link> | prisma.Link
  }
  deleteLink: {
    type: 'Link'
    args: Record<MutationDeleteLinkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: LinkWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Link | null> | prisma.Link | null
  }
  deleteManyLinks: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyLinksArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: LinkWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createVote: {
    type: 'Vote'
    args: Record<MutationCreateVoteArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: VoteCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Vote> | prisma.Vote
  }
  updateVote: {
    type: 'Vote'
    args: Record<MutationUpdateVoteArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: VoteUpdateInput, where: VoteWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Vote | null> | prisma.Vote | null
  }
  upsertVote: {
    type: 'Vote'
    args: Record<MutationUpsertVoteArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: VoteWhereUniqueInput, create: VoteCreateInput, update: VoteUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Vote> | prisma.Vote
  }
  deleteVote: {
    type: 'Vote'
    args: Record<MutationDeleteVoteArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: VoteWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Vote | null> | prisma.Vote | null
  }
  deleteManyVotes: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyVotesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: VoteWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPlayer: {
    type: 'Player'
    args: Record<MutationCreatePlayerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PlayerCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player> | prisma.Player
  }
  updatePlayer: {
    type: 'Player'
    args: Record<MutationUpdatePlayerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PlayerUpdateInput, where: PlayerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player | null> | prisma.Player | null
  }
  updateManyPlayers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPlayersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PlayerUpdateManyMutationInput, where?: PlayerWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPlayer: {
    type: 'Player'
    args: Record<MutationUpsertPlayerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PlayerWhereUniqueInput, create: PlayerCreateInput, update: PlayerUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player> | prisma.Player
  }
  deletePlayer: {
    type: 'Player'
    args: Record<MutationDeletePlayerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PlayerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player | null> | prisma.Player | null
  }
  deleteManyPlayers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPlayersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PlayerWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createTeam: {
    type: 'Team'
    args: Record<MutationCreateTeamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TeamCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team> | prisma.Team
  }
  updateTeam: {
    type: 'Team'
    args: Record<MutationUpdateTeamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TeamUpdateInput, where: TeamWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team | null> | prisma.Team | null
  }
  updateManyTeams: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTeamsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TeamUpdateManyMutationInput, where?: TeamWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTeam: {
    type: 'Team'
    args: Record<MutationUpsertTeamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TeamWhereUniqueInput, create: TeamCreateInput, update: TeamUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team> | prisma.Team
  }
  deleteTeam: {
    type: 'Team'
    args: Record<MutationDeleteTeamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TeamWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team | null> | prisma.Team | null
  }
  deleteManyTeams: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTeamsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TeamWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'link', args?: SubscriptionLinkArgs[] | false, alias?: string  } 
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'vote', args?: SubscriptionVoteArgs[] | false, alias?: string  } 
  | { name: 'player', args?: SubscriptionPlayerArgs[] | false, alias?: string  } 
  | { name: 'team', args?: SubscriptionTeamArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'link'
  | 'user'
  | 'vote'
  | 'player'
  | 'team'


type SubscriptionLinkArgs =
  | 'where'
type SubscriptionUserArgs =
  | 'where'
type SubscriptionVoteArgs =
  | 'where'
type SubscriptionPlayerArgs =
  | 'where'
type SubscriptionTeamArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  link: {
    type: 'LinkSubscriptionPayload'
    args: Record<SubscriptionLinkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: LinkSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LinkSubscriptionPayload | null> | prisma.LinkSubscriptionPayload | null
  }
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  vote: {
    type: 'VoteSubscriptionPayload'
    args: Record<SubscriptionVoteArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: VoteSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VoteSubscriptionPayload | null> | prisma.VoteSubscriptionPayload | null
  }
  player: {
    type: 'PlayerSubscriptionPayload'
    args: Record<SubscriptionPlayerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PlayerSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PlayerSubscriptionPayload | null> | prisma.PlayerSubscriptionPayload | null
  }
  team: {
    type: 'TeamSubscriptionPayload'
    args: Record<SubscriptionTeamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TeamSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamSubscriptionPayload | null> | prisma.TeamSubscriptionPayload | null
  }
}
  

// Types for LinkSubscriptionPayload

type LinkSubscriptionPayloadObject =
  | LinkSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type LinkSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface LinkSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LinkSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Link'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"LinkSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Link | null> | prisma.Link | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'LinkPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"LinkSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LinkPreviousValues | null> | prisma.LinkPreviousValues | null
  }
}
  

// Types for LinkPreviousValues

type LinkPreviousValuesObject =
  | LinkPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'url', args?: [] | false, alias?: string  } 

type LinkPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'description'
  | 'url'



  

export interface LinkPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'name'
  | 'email'
  | 'password'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for VoteSubscriptionPayload

type VoteSubscriptionPayloadObject =
  | VoteSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type VoteSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface VoteSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VoteSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Vote'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"VoteSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Vote | null> | prisma.Vote | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'VotePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"VoteSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VotePreviousValues | null> | prisma.VotePreviousValues | null
  }
}
  

// Types for VotePreviousValues

type VotePreviousValuesObject =
  | VotePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 

type VotePreviousValuesFields =
  | 'id'



  

export interface VotePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PlayerSubscriptionPayload

type PlayerSubscriptionPayloadObject =
  | PlayerSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PlayerSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PlayerSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PlayerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Player'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PlayerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player | null> | prisma.Player | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PlayerPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PlayerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PlayerPreviousValues | null> | prisma.PlayerPreviousValues | null
  }
}
  

// Types for PlayerPreviousValues

type PlayerPreviousValuesObject =
  | PlayerPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'firstName', args?: [] | false, alias?: string  } 
  | { name: 'lastName', args?: [] | false, alias?: string  } 
  | { name: 'number', args?: [] | false, alias?: string  } 

type PlayerPreviousValuesFields =
  | 'id'
  | 'firstName'
  | 'lastName'
  | 'number'



  

export interface PlayerPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  firstName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  lastName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  number: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TeamSubscriptionPayload

type TeamSubscriptionPayloadObject =
  | TeamSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TeamSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TeamSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TeamSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Team'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TeamSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team | null> | prisma.Team | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TeamPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TeamSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamPreviousValues | null> | prisma.TeamPreviousValues | null
  }
}
  

// Types for TeamPreviousValues

type TeamPreviousValuesObject =
  | TeamPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type TeamPreviousValuesFields =
  | 'id'
  | 'name'



  

export interface TeamPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface LinkWhereUniqueInput {
  id?: string | null
}
export type LinkWhereUniqueInputInputObject =
  | Extract<keyof LinkWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface LinkWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  url?: string | null
  url_not?: string | null
  url_in?: string[]
  url_not_in?: string[]
  url_lt?: string | null
  url_lte?: string | null
  url_gt?: string | null
  url_gte?: string | null
  url_contains?: string | null
  url_not_contains?: string | null
  url_starts_with?: string | null
  url_not_starts_with?: string | null
  url_ends_with?: string | null
  url_not_ends_with?: string | null
  postedBy?: UserWhereInput | null
  votes_every?: VoteWhereInput | null
  votes_some?: VoteWhereInput | null
  votes_none?: VoteWhereInput | null
  AND?: LinkWhereInput[]
  OR?: LinkWhereInput[]
  NOT?: LinkWhereInput[]
}
export type LinkWhereInputInputObject =
  | Extract<keyof LinkWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'url_not', alias?: string  } 
  | { name: 'url_in', alias?: string  } 
  | { name: 'url_not_in', alias?: string  } 
  | { name: 'url_lt', alias?: string  } 
  | { name: 'url_lte', alias?: string  } 
  | { name: 'url_gt', alias?: string  } 
  | { name: 'url_gte', alias?: string  } 
  | { name: 'url_contains', alias?: string  } 
  | { name: 'url_not_contains', alias?: string  } 
  | { name: 'url_starts_with', alias?: string  } 
  | { name: 'url_not_starts_with', alias?: string  } 
  | { name: 'url_ends_with', alias?: string  } 
  | { name: 'url_not_ends_with', alias?: string  } 
  | { name: 'postedBy', alias?: string  } 
  | { name: 'votes_every', alias?: string  } 
  | { name: 'votes_some', alias?: string  } 
  | { name: 'votes_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  links_every?: LinkWhereInput | null
  links_some?: LinkWhereInput | null
  links_none?: LinkWhereInput | null
  votes_every?: VoteWhereInput | null
  votes_some?: VoteWhereInput | null
  votes_none?: VoteWhereInput | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'links_every', alias?: string  } 
  | { name: 'links_some', alias?: string  } 
  | { name: 'links_none', alias?: string  } 
  | { name: 'votes_every', alias?: string  } 
  | { name: 'votes_some', alias?: string  } 
  | { name: 'votes_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface VoteWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  link?: LinkWhereInput | null
  user?: UserWhereInput | null
  AND?: VoteWhereInput[]
  OR?: VoteWhereInput[]
  NOT?: VoteWhereInput[]
}
export type VoteWhereInputInputObject =
  | Extract<keyof VoteWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'link', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface VoteWhereUniqueInput {
  id?: string | null
}
export type VoteWhereUniqueInputInputObject =
  | Extract<keyof VoteWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PlayerWhereUniqueInput {
  id?: string | null
}
export type PlayerWhereUniqueInputInputObject =
  | Extract<keyof PlayerWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TeamWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  players_every?: PlayerWhereInput | null
  players_some?: PlayerWhereInput | null
  players_none?: PlayerWhereInput | null
  AND?: TeamWhereInput[]
  OR?: TeamWhereInput[]
  NOT?: TeamWhereInput[]
}
export type TeamWhereInputInputObject =
  | Extract<keyof TeamWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'players_every', alias?: string  } 
  | { name: 'players_some', alias?: string  } 
  | { name: 'players_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PlayerWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  firstName?: string | null
  firstName_not?: string | null
  firstName_in?: string[]
  firstName_not_in?: string[]
  firstName_lt?: string | null
  firstName_lte?: string | null
  firstName_gt?: string | null
  firstName_gte?: string | null
  firstName_contains?: string | null
  firstName_not_contains?: string | null
  firstName_starts_with?: string | null
  firstName_not_starts_with?: string | null
  firstName_ends_with?: string | null
  firstName_not_ends_with?: string | null
  lastName?: string | null
  lastName_not?: string | null
  lastName_in?: string[]
  lastName_not_in?: string[]
  lastName_lt?: string | null
  lastName_lte?: string | null
  lastName_gt?: string | null
  lastName_gte?: string | null
  lastName_contains?: string | null
  lastName_not_contains?: string | null
  lastName_starts_with?: string | null
  lastName_not_starts_with?: string | null
  lastName_ends_with?: string | null
  lastName_not_ends_with?: string | null
  number?: number | null
  number_not?: number | null
  number_in?: number[]
  number_not_in?: number[]
  number_lt?: number | null
  number_lte?: number | null
  number_gt?: number | null
  number_gte?: number | null
  teams_every?: TeamWhereInput | null
  teams_some?: TeamWhereInput | null
  teams_none?: TeamWhereInput | null
  AND?: PlayerWhereInput[]
  OR?: PlayerWhereInput[]
  NOT?: PlayerWhereInput[]
}
export type PlayerWhereInputInputObject =
  | Extract<keyof PlayerWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'firstName_not', alias?: string  } 
  | { name: 'firstName_in', alias?: string  } 
  | { name: 'firstName_not_in', alias?: string  } 
  | { name: 'firstName_lt', alias?: string  } 
  | { name: 'firstName_lte', alias?: string  } 
  | { name: 'firstName_gt', alias?: string  } 
  | { name: 'firstName_gte', alias?: string  } 
  | { name: 'firstName_contains', alias?: string  } 
  | { name: 'firstName_not_contains', alias?: string  } 
  | { name: 'firstName_starts_with', alias?: string  } 
  | { name: 'firstName_not_starts_with', alias?: string  } 
  | { name: 'firstName_ends_with', alias?: string  } 
  | { name: 'firstName_not_ends_with', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'lastName_not', alias?: string  } 
  | { name: 'lastName_in', alias?: string  } 
  | { name: 'lastName_not_in', alias?: string  } 
  | { name: 'lastName_lt', alias?: string  } 
  | { name: 'lastName_lte', alias?: string  } 
  | { name: 'lastName_gt', alias?: string  } 
  | { name: 'lastName_gte', alias?: string  } 
  | { name: 'lastName_contains', alias?: string  } 
  | { name: 'lastName_not_contains', alias?: string  } 
  | { name: 'lastName_starts_with', alias?: string  } 
  | { name: 'lastName_not_starts_with', alias?: string  } 
  | { name: 'lastName_ends_with', alias?: string  } 
  | { name: 'lastName_not_ends_with', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'number_not', alias?: string  } 
  | { name: 'number_in', alias?: string  } 
  | { name: 'number_not_in', alias?: string  } 
  | { name: 'number_lt', alias?: string  } 
  | { name: 'number_lte', alias?: string  } 
  | { name: 'number_gt', alias?: string  } 
  | { name: 'number_gte', alias?: string  } 
  | { name: 'teams_every', alias?: string  } 
  | { name: 'teams_some', alias?: string  } 
  | { name: 'teams_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TeamWhereUniqueInput {
  id?: string | null
  name?: string | null
}
export type TeamWhereUniqueInputInputObject =
  | Extract<keyof TeamWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface LinkCreateInput {
  id?: string | null
  description?: string
  url?: string
  postedBy?: UserCreateOneWithoutLinksInput | null
  votes?: VoteCreateManyWithoutLinkInput | null
}
export type LinkCreateInputInputObject =
  | Extract<keyof LinkCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'postedBy', alias?: string  } 
  | { name: 'votes', alias?: string  } 
  
export interface UserCreateOneWithoutLinksInput {
  create?: UserCreateWithoutLinksInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutLinksInputInputObject =
  | Extract<keyof UserCreateOneWithoutLinksInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutLinksInput {
  id?: string | null
  name?: string
  email?: string
  password?: string
  votes?: VoteCreateManyWithoutUserInput | null
}
export type UserCreateWithoutLinksInputInputObject =
  | Extract<keyof UserCreateWithoutLinksInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'votes', alias?: string  } 
  
export interface VoteCreateManyWithoutUserInput {
  create?: VoteCreateWithoutUserInput[]
  connect?: VoteWhereUniqueInput[]
}
export type VoteCreateManyWithoutUserInputInputObject =
  | Extract<keyof VoteCreateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface VoteCreateWithoutUserInput {
  id?: string | null
  link?: LinkCreateOneWithoutVotesInput
}
export type VoteCreateWithoutUserInputInputObject =
  | Extract<keyof VoteCreateWithoutUserInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'link', alias?: string  } 
  
export interface LinkCreateOneWithoutVotesInput {
  create?: LinkCreateWithoutVotesInput | null
  connect?: LinkWhereUniqueInput | null
}
export type LinkCreateOneWithoutVotesInputInputObject =
  | Extract<keyof LinkCreateOneWithoutVotesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface LinkCreateWithoutVotesInput {
  id?: string | null
  description?: string
  url?: string
  postedBy?: UserCreateOneWithoutLinksInput | null
}
export type LinkCreateWithoutVotesInputInputObject =
  | Extract<keyof LinkCreateWithoutVotesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'postedBy', alias?: string  } 
  
export interface VoteCreateManyWithoutLinkInput {
  create?: VoteCreateWithoutLinkInput[]
  connect?: VoteWhereUniqueInput[]
}
export type VoteCreateManyWithoutLinkInputInputObject =
  | Extract<keyof VoteCreateManyWithoutLinkInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface VoteCreateWithoutLinkInput {
  id?: string | null
  user?: UserCreateOneWithoutVotesInput
}
export type VoteCreateWithoutLinkInputInputObject =
  | Extract<keyof VoteCreateWithoutLinkInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface UserCreateOneWithoutVotesInput {
  create?: UserCreateWithoutVotesInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutVotesInputInputObject =
  | Extract<keyof UserCreateOneWithoutVotesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutVotesInput {
  id?: string | null
  name?: string
  email?: string
  password?: string
  links?: LinkCreateManyWithoutPostedByInput | null
}
export type UserCreateWithoutVotesInputInputObject =
  | Extract<keyof UserCreateWithoutVotesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'links', alias?: string  } 
  
export interface LinkCreateManyWithoutPostedByInput {
  create?: LinkCreateWithoutPostedByInput[]
  connect?: LinkWhereUniqueInput[]
}
export type LinkCreateManyWithoutPostedByInputInputObject =
  | Extract<keyof LinkCreateManyWithoutPostedByInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface LinkCreateWithoutPostedByInput {
  id?: string | null
  description?: string
  url?: string
  votes?: VoteCreateManyWithoutLinkInput | null
}
export type LinkCreateWithoutPostedByInputInputObject =
  | Extract<keyof LinkCreateWithoutPostedByInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'votes', alias?: string  } 
  
export interface LinkUpdateInput {
  description?: string | null
  url?: string | null
  postedBy?: UserUpdateOneWithoutLinksInput | null
  votes?: VoteUpdateManyWithoutLinkInput | null
}
export type LinkUpdateInputInputObject =
  | Extract<keyof LinkUpdateInput, string>
  | { name: 'description', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'postedBy', alias?: string  } 
  | { name: 'votes', alias?: string  } 
  
export interface UserUpdateOneWithoutLinksInput {
  create?: UserCreateWithoutLinksInput | null
  update?: UserUpdateWithoutLinksDataInput | null
  upsert?: UserUpsertWithoutLinksInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneWithoutLinksInputInputObject =
  | Extract<keyof UserUpdateOneWithoutLinksInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutLinksDataInput {
  name?: string | null
  email?: string | null
  password?: string | null
  votes?: VoteUpdateManyWithoutUserInput | null
}
export type UserUpdateWithoutLinksDataInputInputObject =
  | Extract<keyof UserUpdateWithoutLinksDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'votes', alias?: string  } 
  
export interface VoteUpdateManyWithoutUserInput {
  create?: VoteCreateWithoutUserInput[]
  delete?: VoteWhereUniqueInput[]
  connect?: VoteWhereUniqueInput[]
  set?: VoteWhereUniqueInput[]
  disconnect?: VoteWhereUniqueInput[]
  update?: VoteUpdateWithWhereUniqueWithoutUserInput[]
  upsert?: VoteUpsertWithWhereUniqueWithoutUserInput[]
  deleteMany?: VoteScalarWhereInput[]
}
export type VoteUpdateManyWithoutUserInputInputObject =
  | Extract<keyof VoteUpdateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  
export interface VoteUpdateWithWhereUniqueWithoutUserInput {
  where?: VoteWhereUniqueInput
  data?: VoteUpdateWithoutUserDataInput
}
export type VoteUpdateWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof VoteUpdateWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface VoteUpdateWithoutUserDataInput {
  link?: LinkUpdateOneRequiredWithoutVotesInput | null
}
export type VoteUpdateWithoutUserDataInputInputObject =
  | Extract<keyof VoteUpdateWithoutUserDataInput, string>
  | { name: 'link', alias?: string  } 
  
export interface LinkUpdateOneRequiredWithoutVotesInput {
  create?: LinkCreateWithoutVotesInput | null
  update?: LinkUpdateWithoutVotesDataInput | null
  upsert?: LinkUpsertWithoutVotesInput | null
  connect?: LinkWhereUniqueInput | null
}
export type LinkUpdateOneRequiredWithoutVotesInputInputObject =
  | Extract<keyof LinkUpdateOneRequiredWithoutVotesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface LinkUpdateWithoutVotesDataInput {
  description?: string | null
  url?: string | null
  postedBy?: UserUpdateOneWithoutLinksInput | null
}
export type LinkUpdateWithoutVotesDataInputInputObject =
  | Extract<keyof LinkUpdateWithoutVotesDataInput, string>
  | { name: 'description', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'postedBy', alias?: string  } 
  
export interface LinkUpsertWithoutVotesInput {
  update?: LinkUpdateWithoutVotesDataInput
  create?: LinkCreateWithoutVotesInput
}
export type LinkUpsertWithoutVotesInputInputObject =
  | Extract<keyof LinkUpsertWithoutVotesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface VoteUpsertWithWhereUniqueWithoutUserInput {
  where?: VoteWhereUniqueInput
  update?: VoteUpdateWithoutUserDataInput
  create?: VoteCreateWithoutUserInput
}
export type VoteUpsertWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof VoteUpsertWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface VoteScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  AND?: VoteScalarWhereInput[]
  OR?: VoteScalarWhereInput[]
  NOT?: VoteScalarWhereInput[]
}
export type VoteScalarWhereInputInputObject =
  | Extract<keyof VoteScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserUpsertWithoutLinksInput {
  update?: UserUpdateWithoutLinksDataInput
  create?: UserCreateWithoutLinksInput
}
export type UserUpsertWithoutLinksInputInputObject =
  | Extract<keyof UserUpsertWithoutLinksInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface VoteUpdateManyWithoutLinkInput {
  create?: VoteCreateWithoutLinkInput[]
  delete?: VoteWhereUniqueInput[]
  connect?: VoteWhereUniqueInput[]
  set?: VoteWhereUniqueInput[]
  disconnect?: VoteWhereUniqueInput[]
  update?: VoteUpdateWithWhereUniqueWithoutLinkInput[]
  upsert?: VoteUpsertWithWhereUniqueWithoutLinkInput[]
  deleteMany?: VoteScalarWhereInput[]
}
export type VoteUpdateManyWithoutLinkInputInputObject =
  | Extract<keyof VoteUpdateManyWithoutLinkInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  
export interface VoteUpdateWithWhereUniqueWithoutLinkInput {
  where?: VoteWhereUniqueInput
  data?: VoteUpdateWithoutLinkDataInput
}
export type VoteUpdateWithWhereUniqueWithoutLinkInputInputObject =
  | Extract<keyof VoteUpdateWithWhereUniqueWithoutLinkInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface VoteUpdateWithoutLinkDataInput {
  user?: UserUpdateOneRequiredWithoutVotesInput | null
}
export type VoteUpdateWithoutLinkDataInputInputObject =
  | Extract<keyof VoteUpdateWithoutLinkDataInput, string>
  | { name: 'user', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutVotesInput {
  create?: UserCreateWithoutVotesInput | null
  update?: UserUpdateWithoutVotesDataInput | null
  upsert?: UserUpsertWithoutVotesInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutVotesInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutVotesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutVotesDataInput {
  name?: string | null
  email?: string | null
  password?: string | null
  links?: LinkUpdateManyWithoutPostedByInput | null
}
export type UserUpdateWithoutVotesDataInputInputObject =
  | Extract<keyof UserUpdateWithoutVotesDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'links', alias?: string  } 
  
export interface LinkUpdateManyWithoutPostedByInput {
  create?: LinkCreateWithoutPostedByInput[]
  delete?: LinkWhereUniqueInput[]
  connect?: LinkWhereUniqueInput[]
  set?: LinkWhereUniqueInput[]
  disconnect?: LinkWhereUniqueInput[]
  update?: LinkUpdateWithWhereUniqueWithoutPostedByInput[]
  upsert?: LinkUpsertWithWhereUniqueWithoutPostedByInput[]
  deleteMany?: LinkScalarWhereInput[]
  updateMany?: LinkUpdateManyWithWhereNestedInput[]
}
export type LinkUpdateManyWithoutPostedByInputInputObject =
  | Extract<keyof LinkUpdateManyWithoutPostedByInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface LinkUpdateWithWhereUniqueWithoutPostedByInput {
  where?: LinkWhereUniqueInput
  data?: LinkUpdateWithoutPostedByDataInput
}
export type LinkUpdateWithWhereUniqueWithoutPostedByInputInputObject =
  | Extract<keyof LinkUpdateWithWhereUniqueWithoutPostedByInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface LinkUpdateWithoutPostedByDataInput {
  description?: string | null
  url?: string | null
  votes?: VoteUpdateManyWithoutLinkInput | null
}
export type LinkUpdateWithoutPostedByDataInputInputObject =
  | Extract<keyof LinkUpdateWithoutPostedByDataInput, string>
  | { name: 'description', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'votes', alias?: string  } 
  
export interface LinkUpsertWithWhereUniqueWithoutPostedByInput {
  where?: LinkWhereUniqueInput
  update?: LinkUpdateWithoutPostedByDataInput
  create?: LinkCreateWithoutPostedByInput
}
export type LinkUpsertWithWhereUniqueWithoutPostedByInputInputObject =
  | Extract<keyof LinkUpsertWithWhereUniqueWithoutPostedByInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface LinkScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  url?: string | null
  url_not?: string | null
  url_in?: string[]
  url_not_in?: string[]
  url_lt?: string | null
  url_lte?: string | null
  url_gt?: string | null
  url_gte?: string | null
  url_contains?: string | null
  url_not_contains?: string | null
  url_starts_with?: string | null
  url_not_starts_with?: string | null
  url_ends_with?: string | null
  url_not_ends_with?: string | null
  AND?: LinkScalarWhereInput[]
  OR?: LinkScalarWhereInput[]
  NOT?: LinkScalarWhereInput[]
}
export type LinkScalarWhereInputInputObject =
  | Extract<keyof LinkScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'url_not', alias?: string  } 
  | { name: 'url_in', alias?: string  } 
  | { name: 'url_not_in', alias?: string  } 
  | { name: 'url_lt', alias?: string  } 
  | { name: 'url_lte', alias?: string  } 
  | { name: 'url_gt', alias?: string  } 
  | { name: 'url_gte', alias?: string  } 
  | { name: 'url_contains', alias?: string  } 
  | { name: 'url_not_contains', alias?: string  } 
  | { name: 'url_starts_with', alias?: string  } 
  | { name: 'url_not_starts_with', alias?: string  } 
  | { name: 'url_ends_with', alias?: string  } 
  | { name: 'url_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface LinkUpdateManyWithWhereNestedInput {
  where?: LinkScalarWhereInput
  data?: LinkUpdateManyDataInput
}
export type LinkUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof LinkUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface LinkUpdateManyDataInput {
  description?: string | null
  url?: string | null
}
export type LinkUpdateManyDataInputInputObject =
  | Extract<keyof LinkUpdateManyDataInput, string>
  | { name: 'description', alias?: string  } 
  | { name: 'url', alias?: string  } 
  
export interface UserUpsertWithoutVotesInput {
  update?: UserUpdateWithoutVotesDataInput
  create?: UserCreateWithoutVotesInput
}
export type UserUpsertWithoutVotesInputInputObject =
  | Extract<keyof UserUpsertWithoutVotesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface VoteUpsertWithWhereUniqueWithoutLinkInput {
  where?: VoteWhereUniqueInput
  update?: VoteUpdateWithoutLinkDataInput
  create?: VoteCreateWithoutLinkInput
}
export type VoteUpsertWithWhereUniqueWithoutLinkInputInputObject =
  | Extract<keyof VoteUpsertWithWhereUniqueWithoutLinkInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface LinkUpdateManyMutationInput {
  description?: string | null
  url?: string | null
}
export type LinkUpdateManyMutationInputInputObject =
  | Extract<keyof LinkUpdateManyMutationInput, string>
  | { name: 'description', alias?: string  } 
  | { name: 'url', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  name?: string
  email?: string
  password?: string
  links?: LinkCreateManyWithoutPostedByInput | null
  votes?: VoteCreateManyWithoutUserInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'links', alias?: string  } 
  | { name: 'votes', alias?: string  } 
  
export interface UserUpdateInput {
  name?: string | null
  email?: string | null
  password?: string | null
  links?: LinkUpdateManyWithoutPostedByInput | null
  votes?: VoteUpdateManyWithoutUserInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'links', alias?: string  } 
  | { name: 'votes', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  name?: string | null
  email?: string | null
  password?: string | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  
export interface VoteCreateInput {
  id?: string | null
  link?: LinkCreateOneWithoutVotesInput
  user?: UserCreateOneWithoutVotesInput
}
export type VoteCreateInputInputObject =
  | Extract<keyof VoteCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'link', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface VoteUpdateInput {
  link?: LinkUpdateOneRequiredWithoutVotesInput | null
  user?: UserUpdateOneRequiredWithoutVotesInput | null
}
export type VoteUpdateInputInputObject =
  | Extract<keyof VoteUpdateInput, string>
  | { name: 'link', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface PlayerCreateInput {
  id?: string | null
  firstName?: string
  lastName?: string
  number?: number
  teams?: TeamCreateManyWithoutPlayersInput | null
}
export type PlayerCreateInputInputObject =
  | Extract<keyof PlayerCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'teams', alias?: string  } 
  
export interface TeamCreateManyWithoutPlayersInput {
  create?: TeamCreateWithoutPlayersInput[]
  connect?: TeamWhereUniqueInput[]
}
export type TeamCreateManyWithoutPlayersInputInputObject =
  | Extract<keyof TeamCreateManyWithoutPlayersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TeamCreateWithoutPlayersInput {
  id?: string | null
  name?: string
}
export type TeamCreateWithoutPlayersInputInputObject =
  | Extract<keyof TeamCreateWithoutPlayersInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface PlayerUpdateInput {
  firstName?: string | null
  lastName?: string | null
  number?: number | null
  teams?: TeamUpdateManyWithoutPlayersInput | null
}
export type PlayerUpdateInputInputObject =
  | Extract<keyof PlayerUpdateInput, string>
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'teams', alias?: string  } 
  
export interface TeamUpdateManyWithoutPlayersInput {
  create?: TeamCreateWithoutPlayersInput[]
  delete?: TeamWhereUniqueInput[]
  connect?: TeamWhereUniqueInput[]
  set?: TeamWhereUniqueInput[]
  disconnect?: TeamWhereUniqueInput[]
  update?: TeamUpdateWithWhereUniqueWithoutPlayersInput[]
  upsert?: TeamUpsertWithWhereUniqueWithoutPlayersInput[]
  deleteMany?: TeamScalarWhereInput[]
  updateMany?: TeamUpdateManyWithWhereNestedInput[]
}
export type TeamUpdateManyWithoutPlayersInputInputObject =
  | Extract<keyof TeamUpdateManyWithoutPlayersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface TeamUpdateWithWhereUniqueWithoutPlayersInput {
  where?: TeamWhereUniqueInput
  data?: TeamUpdateWithoutPlayersDataInput
}
export type TeamUpdateWithWhereUniqueWithoutPlayersInputInputObject =
  | Extract<keyof TeamUpdateWithWhereUniqueWithoutPlayersInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface TeamUpdateWithoutPlayersDataInput {
  name?: string | null
}
export type TeamUpdateWithoutPlayersDataInputInputObject =
  | Extract<keyof TeamUpdateWithoutPlayersDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface TeamUpsertWithWhereUniqueWithoutPlayersInput {
  where?: TeamWhereUniqueInput
  update?: TeamUpdateWithoutPlayersDataInput
  create?: TeamCreateWithoutPlayersInput
}
export type TeamUpsertWithWhereUniqueWithoutPlayersInputInputObject =
  | Extract<keyof TeamUpsertWithWhereUniqueWithoutPlayersInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TeamScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: TeamScalarWhereInput[]
  OR?: TeamScalarWhereInput[]
  NOT?: TeamScalarWhereInput[]
}
export type TeamScalarWhereInputInputObject =
  | Extract<keyof TeamScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TeamUpdateManyWithWhereNestedInput {
  where?: TeamScalarWhereInput
  data?: TeamUpdateManyDataInput
}
export type TeamUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof TeamUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface TeamUpdateManyDataInput {
  name?: string | null
}
export type TeamUpdateManyDataInputInputObject =
  | Extract<keyof TeamUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface PlayerUpdateManyMutationInput {
  firstName?: string | null
  lastName?: string | null
  number?: number | null
}
export type PlayerUpdateManyMutationInputInputObject =
  | Extract<keyof PlayerUpdateManyMutationInput, string>
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'number', alias?: string  } 
  
export interface TeamCreateInput {
  id?: string | null
  name?: string
  players?: PlayerCreateManyWithoutTeamsInput | null
}
export type TeamCreateInputInputObject =
  | Extract<keyof TeamCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'players', alias?: string  } 
  
export interface PlayerCreateManyWithoutTeamsInput {
  create?: PlayerCreateWithoutTeamsInput[]
  connect?: PlayerWhereUniqueInput[]
}
export type PlayerCreateManyWithoutTeamsInputInputObject =
  | Extract<keyof PlayerCreateManyWithoutTeamsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PlayerCreateWithoutTeamsInput {
  id?: string | null
  firstName?: string
  lastName?: string
  number?: number
}
export type PlayerCreateWithoutTeamsInputInputObject =
  | Extract<keyof PlayerCreateWithoutTeamsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'number', alias?: string  } 
  
export interface TeamUpdateInput {
  name?: string | null
  players?: PlayerUpdateManyWithoutTeamsInput | null
}
export type TeamUpdateInputInputObject =
  | Extract<keyof TeamUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'players', alias?: string  } 
  
export interface PlayerUpdateManyWithoutTeamsInput {
  create?: PlayerCreateWithoutTeamsInput[]
  delete?: PlayerWhereUniqueInput[]
  connect?: PlayerWhereUniqueInput[]
  set?: PlayerWhereUniqueInput[]
  disconnect?: PlayerWhereUniqueInput[]
  update?: PlayerUpdateWithWhereUniqueWithoutTeamsInput[]
  upsert?: PlayerUpsertWithWhereUniqueWithoutTeamsInput[]
  deleteMany?: PlayerScalarWhereInput[]
  updateMany?: PlayerUpdateManyWithWhereNestedInput[]
}
export type PlayerUpdateManyWithoutTeamsInputInputObject =
  | Extract<keyof PlayerUpdateManyWithoutTeamsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface PlayerUpdateWithWhereUniqueWithoutTeamsInput {
  where?: PlayerWhereUniqueInput
  data?: PlayerUpdateWithoutTeamsDataInput
}
export type PlayerUpdateWithWhereUniqueWithoutTeamsInputInputObject =
  | Extract<keyof PlayerUpdateWithWhereUniqueWithoutTeamsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PlayerUpdateWithoutTeamsDataInput {
  firstName?: string | null
  lastName?: string | null
  number?: number | null
}
export type PlayerUpdateWithoutTeamsDataInputInputObject =
  | Extract<keyof PlayerUpdateWithoutTeamsDataInput, string>
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'number', alias?: string  } 
  
export interface PlayerUpsertWithWhereUniqueWithoutTeamsInput {
  where?: PlayerWhereUniqueInput
  update?: PlayerUpdateWithoutTeamsDataInput
  create?: PlayerCreateWithoutTeamsInput
}
export type PlayerUpsertWithWhereUniqueWithoutTeamsInputInputObject =
  | Extract<keyof PlayerUpsertWithWhereUniqueWithoutTeamsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PlayerScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  firstName?: string | null
  firstName_not?: string | null
  firstName_in?: string[]
  firstName_not_in?: string[]
  firstName_lt?: string | null
  firstName_lte?: string | null
  firstName_gt?: string | null
  firstName_gte?: string | null
  firstName_contains?: string | null
  firstName_not_contains?: string | null
  firstName_starts_with?: string | null
  firstName_not_starts_with?: string | null
  firstName_ends_with?: string | null
  firstName_not_ends_with?: string | null
  lastName?: string | null
  lastName_not?: string | null
  lastName_in?: string[]
  lastName_not_in?: string[]
  lastName_lt?: string | null
  lastName_lte?: string | null
  lastName_gt?: string | null
  lastName_gte?: string | null
  lastName_contains?: string | null
  lastName_not_contains?: string | null
  lastName_starts_with?: string | null
  lastName_not_starts_with?: string | null
  lastName_ends_with?: string | null
  lastName_not_ends_with?: string | null
  number?: number | null
  number_not?: number | null
  number_in?: number[]
  number_not_in?: number[]
  number_lt?: number | null
  number_lte?: number | null
  number_gt?: number | null
  number_gte?: number | null
  AND?: PlayerScalarWhereInput[]
  OR?: PlayerScalarWhereInput[]
  NOT?: PlayerScalarWhereInput[]
}
export type PlayerScalarWhereInputInputObject =
  | Extract<keyof PlayerScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'firstName_not', alias?: string  } 
  | { name: 'firstName_in', alias?: string  } 
  | { name: 'firstName_not_in', alias?: string  } 
  | { name: 'firstName_lt', alias?: string  } 
  | { name: 'firstName_lte', alias?: string  } 
  | { name: 'firstName_gt', alias?: string  } 
  | { name: 'firstName_gte', alias?: string  } 
  | { name: 'firstName_contains', alias?: string  } 
  | { name: 'firstName_not_contains', alias?: string  } 
  | { name: 'firstName_starts_with', alias?: string  } 
  | { name: 'firstName_not_starts_with', alias?: string  } 
  | { name: 'firstName_ends_with', alias?: string  } 
  | { name: 'firstName_not_ends_with', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'lastName_not', alias?: string  } 
  | { name: 'lastName_in', alias?: string  } 
  | { name: 'lastName_not_in', alias?: string  } 
  | { name: 'lastName_lt', alias?: string  } 
  | { name: 'lastName_lte', alias?: string  } 
  | { name: 'lastName_gt', alias?: string  } 
  | { name: 'lastName_gte', alias?: string  } 
  | { name: 'lastName_contains', alias?: string  } 
  | { name: 'lastName_not_contains', alias?: string  } 
  | { name: 'lastName_starts_with', alias?: string  } 
  | { name: 'lastName_not_starts_with', alias?: string  } 
  | { name: 'lastName_ends_with', alias?: string  } 
  | { name: 'lastName_not_ends_with', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'number_not', alias?: string  } 
  | { name: 'number_in', alias?: string  } 
  | { name: 'number_not_in', alias?: string  } 
  | { name: 'number_lt', alias?: string  } 
  | { name: 'number_lte', alias?: string  } 
  | { name: 'number_gt', alias?: string  } 
  | { name: 'number_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PlayerUpdateManyWithWhereNestedInput {
  where?: PlayerScalarWhereInput
  data?: PlayerUpdateManyDataInput
}
export type PlayerUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof PlayerUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PlayerUpdateManyDataInput {
  firstName?: string | null
  lastName?: string | null
  number?: number | null
}
export type PlayerUpdateManyDataInputInputObject =
  | Extract<keyof PlayerUpdateManyDataInput, string>
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'number', alias?: string  } 
  
export interface TeamUpdateManyMutationInput {
  name?: string | null
}
export type TeamUpdateManyMutationInputInputObject =
  | Extract<keyof TeamUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface LinkSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: LinkWhereInput | null
  AND?: LinkSubscriptionWhereInput[]
  OR?: LinkSubscriptionWhereInput[]
  NOT?: LinkSubscriptionWhereInput[]
}
export type LinkSubscriptionWhereInputInputObject =
  | Extract<keyof LinkSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface VoteSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: VoteWhereInput | null
  AND?: VoteSubscriptionWhereInput[]
  OR?: VoteSubscriptionWhereInput[]
  NOT?: VoteSubscriptionWhereInput[]
}
export type VoteSubscriptionWhereInputInputObject =
  | Extract<keyof VoteSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PlayerSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PlayerWhereInput | null
  AND?: PlayerSubscriptionWhereInput[]
  OR?: PlayerSubscriptionWhereInput[]
  NOT?: PlayerSubscriptionWhereInput[]
}
export type PlayerSubscriptionWhereInputInputObject =
  | Extract<keyof PlayerSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TeamSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TeamWhereInput | null
  AND?: TeamSubscriptionWhereInput[]
  OR?: TeamSubscriptionWhereInput[]
  NOT?: TeamSubscriptionWhereInput[]
}
export type TeamSubscriptionWhereInputInputObject =
  | Extract<keyof TeamSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type LinkOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'url_ASC'
  | 'url_DESC'
  
export type VoteOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'password_ASC'
  | 'password_DESC'
  
export type TeamOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PlayerOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'firstName_ASC'
  | 'firstName_DESC'
  | 'lastName_ASC'
  | 'lastName_DESC'
  | 'number_ASC'
  | 'number_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  