### This file was autogenerated by Nexus 0.11.7
### Do not make changes to this file directly


type AggregateLink {
  count: Int!
}

type AggregatePlayer {
  count: Int!
}

type AggregateTeam {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVote {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Link {
  createdAt: DateTime!
  description: String!
  id: ID!
  postedBy: User
  updatedAt: DateTime!
  url: String!
  votes(after: String, before: String, first: Int, last: Int, orderBy: VoteOrderByInput, skip: Int, where: VoteWhereInput): [Vote!]
}

type LinkConnection {
  aggregate: AggregateLink!
  edges: [LinkEdge!]!
  pageInfo: PageInfo!
}

input LinkCreateInput {
  description: String!
  id: ID
  postedBy: UserCreateOneWithoutLinksInput
  url: String!
  votes: VoteCreateManyWithoutLinkInput
}

input LinkCreateManyWithoutPostedByInput {
  connect: [LinkWhereUniqueInput!]
  create: [LinkCreateWithoutPostedByInput!]
}

input LinkCreateOneWithoutVotesInput {
  connect: LinkWhereUniqueInput
  create: LinkCreateWithoutVotesInput
}

input LinkCreateWithoutPostedByInput {
  description: String!
  id: ID
  url: String!
  votes: VoteCreateManyWithoutLinkInput
}

input LinkCreateWithoutVotesInput {
  description: String!
  id: ID
  postedBy: UserCreateOneWithoutLinksInput
  url: String!
}

type LinkEdge {
  cursor: String!
  node: Link!
}

enum LinkOrderByInput {
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  url_ASC
  url_DESC
}

input LinkScalarWhereInput {
  AND: [LinkScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [LinkScalarWhereInput!]
  OR: [LinkScalarWhereInput!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
  url: String
  url_contains: String
  url_ends_with: String
  url_gt: String
  url_gte: String
  url_in: [String!]
  url_lt: String
  url_lte: String
  url_not: String
  url_not_contains: String
  url_not_ends_with: String
  url_not_in: [String!]
  url_not_starts_with: String
  url_starts_with: String
}

input LinkUpdateInput {
  description: String
  postedBy: UserUpdateOneWithoutLinksInput
  url: String
  votes: VoteUpdateManyWithoutLinkInput
}

input LinkUpdateManyDataInput {
  description: String
  url: String
}

input LinkUpdateManyMutationInput {
  description: String
  url: String
}

input LinkUpdateManyWithoutPostedByInput {
  connect: [LinkWhereUniqueInput!]
  create: [LinkCreateWithoutPostedByInput!]
  delete: [LinkWhereUniqueInput!]
  deleteMany: [LinkScalarWhereInput!]
  disconnect: [LinkWhereUniqueInput!]
  set: [LinkWhereUniqueInput!]
  update: [LinkUpdateWithWhereUniqueWithoutPostedByInput!]
  updateMany: [LinkUpdateManyWithWhereNestedInput!]
  upsert: [LinkUpsertWithWhereUniqueWithoutPostedByInput!]
}

input LinkUpdateManyWithWhereNestedInput {
  data: LinkUpdateManyDataInput!
  where: LinkScalarWhereInput!
}

input LinkUpdateOneRequiredWithoutVotesInput {
  connect: LinkWhereUniqueInput
  create: LinkCreateWithoutVotesInput
  update: LinkUpdateWithoutVotesDataInput
  upsert: LinkUpsertWithoutVotesInput
}

input LinkUpdateWithoutPostedByDataInput {
  description: String
  url: String
  votes: VoteUpdateManyWithoutLinkInput
}

input LinkUpdateWithoutVotesDataInput {
  description: String
  postedBy: UserUpdateOneWithoutLinksInput
  url: String
}

input LinkUpdateWithWhereUniqueWithoutPostedByInput {
  data: LinkUpdateWithoutPostedByDataInput!
  where: LinkWhereUniqueInput!
}

input LinkUpsertWithoutVotesInput {
  create: LinkCreateWithoutVotesInput!
  update: LinkUpdateWithoutVotesDataInput!
}

input LinkUpsertWithWhereUniqueWithoutPostedByInput {
  create: LinkCreateWithoutPostedByInput!
  update: LinkUpdateWithoutPostedByDataInput!
  where: LinkWhereUniqueInput!
}

input LinkWhereInput {
  AND: [LinkWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [LinkWhereInput!]
  OR: [LinkWhereInput!]
  postedBy: UserWhereInput
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
  url: String
  url_contains: String
  url_ends_with: String
  url_gt: String
  url_gte: String
  url_in: [String!]
  url_lt: String
  url_lte: String
  url_not: String
  url_not_contains: String
  url_not_ends_with: String
  url_not_in: [String!]
  url_not_starts_with: String
  url_starts_with: String
  votes_every: VoteWhereInput
  votes_none: VoteWhereInput
  votes_some: VoteWhereInput
}

input LinkWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createLink(data: LinkCreateInput!): Link!
  createPlayer(data: PlayerCreateInput!): Player!
  createTeam(data: TeamCreateInput!): Team!
  createUser(data: UserCreateInput!): User!
  createVote(data: VoteCreateInput!): Vote!
  deleteLink(where: LinkWhereUniqueInput!): Link
  deleteManyLinks(where: LinkWhereInput): BatchPayload!
  deleteManyPlayers(where: PlayerWhereInput): BatchPayload!
  deleteManyTeams(where: TeamWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyVotes(where: VoteWhereInput): BatchPayload!
  deletePlayer(where: PlayerWhereUniqueInput!): Player
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteUser(where: UserWhereUniqueInput!): User
  deleteVote(where: VoteWhereUniqueInput!): Vote
  signup(email: String, name: String, password: String): User
  updateLink(data: LinkUpdateInput!, where: LinkWhereUniqueInput!): Link
  updateManyLinks(data: LinkUpdateManyMutationInput!, where: LinkWhereInput): BatchPayload!
  updateManyPlayers(data: PlayerUpdateManyMutationInput!, where: PlayerWhereInput): BatchPayload!
  updateManyTeams(data: TeamUpdateManyMutationInput!, where: TeamWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updatePlayer(data: PlayerUpdateInput!, where: PlayerWhereUniqueInput!): Player
  updateTeam(data: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateVote(data: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote
  upsertLink(create: LinkCreateInput!, update: LinkUpdateInput!, where: LinkWhereUniqueInput!): Link!
  upsertPlayer(create: PlayerCreateInput!, update: PlayerUpdateInput!, where: PlayerWhereUniqueInput!): Player!
  upsertTeam(create: TeamCreateInput!, update: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertVote(create: VoteCreateInput!, update: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Player {
  firstName: String!
  id: ID!
  lastName: String!
  number: Int!
  teams(after: String, before: String, first: Int, last: Int, orderBy: TeamOrderByInput, skip: Int, where: TeamWhereInput): [Team!]
  uppercaseFirstName: String
}

type PlayerConnection {
  aggregate: AggregatePlayer!
  edges: [PlayerEdge!]!
  pageInfo: PageInfo!
}

input PlayerCreateInput {
  firstName: String!
  id: ID
  lastName: String!
  number: Int!
  teams: TeamCreateManyWithoutPlayersInput
}

input PlayerCreateManyWithoutTeamsInput {
  connect: [PlayerWhereUniqueInput!]
  create: [PlayerCreateWithoutTeamsInput!]
}

input PlayerCreateWithoutTeamsInput {
  firstName: String!
  id: ID
  lastName: String!
  number: Int!
}

type PlayerEdge {
  cursor: String!
  node: Player!
}

enum PlayerOrderByInput {
  createdAt_ASC
  createdAt_DESC
  firstName_ASC
  firstName_DESC
  id_ASC
  id_DESC
  lastName_ASC
  lastName_DESC
  number_ASC
  number_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input PlayerScalarWhereInput {
  AND: [PlayerScalarWhereInput!]
  firstName: String
  firstName_contains: String
  firstName_ends_with: String
  firstName_gt: String
  firstName_gte: String
  firstName_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_not: String
  firstName_not_contains: String
  firstName_not_ends_with: String
  firstName_not_in: [String!]
  firstName_not_starts_with: String
  firstName_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  lastName: String
  lastName_contains: String
  lastName_ends_with: String
  lastName_gt: String
  lastName_gte: String
  lastName_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_not: String
  lastName_not_contains: String
  lastName_not_ends_with: String
  lastName_not_in: [String!]
  lastName_not_starts_with: String
  lastName_starts_with: String
  NOT: [PlayerScalarWhereInput!]
  number: Int
  number_gt: Int
  number_gte: Int
  number_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_not: Int
  number_not_in: [Int!]
  OR: [PlayerScalarWhereInput!]
}

input PlayerUpdateInput {
  firstName: String
  lastName: String
  number: Int
  teams: TeamUpdateManyWithoutPlayersInput
}

input PlayerUpdateManyDataInput {
  firstName: String
  lastName: String
  number: Int
}

input PlayerUpdateManyMutationInput {
  firstName: String
  lastName: String
  number: Int
}

input PlayerUpdateManyWithoutTeamsInput {
  connect: [PlayerWhereUniqueInput!]
  create: [PlayerCreateWithoutTeamsInput!]
  delete: [PlayerWhereUniqueInput!]
  deleteMany: [PlayerScalarWhereInput!]
  disconnect: [PlayerWhereUniqueInput!]
  set: [PlayerWhereUniqueInput!]
  update: [PlayerUpdateWithWhereUniqueWithoutTeamsInput!]
  updateMany: [PlayerUpdateManyWithWhereNestedInput!]
  upsert: [PlayerUpsertWithWhereUniqueWithoutTeamsInput!]
}

input PlayerUpdateManyWithWhereNestedInput {
  data: PlayerUpdateManyDataInput!
  where: PlayerScalarWhereInput!
}

input PlayerUpdateWithoutTeamsDataInput {
  firstName: String
  lastName: String
  number: Int
}

input PlayerUpdateWithWhereUniqueWithoutTeamsInput {
  data: PlayerUpdateWithoutTeamsDataInput!
  where: PlayerWhereUniqueInput!
}

input PlayerUpsertWithWhereUniqueWithoutTeamsInput {
  create: PlayerCreateWithoutTeamsInput!
  update: PlayerUpdateWithoutTeamsDataInput!
  where: PlayerWhereUniqueInput!
}

input PlayerWhereInput {
  AND: [PlayerWhereInput!]
  firstName: String
  firstName_contains: String
  firstName_ends_with: String
  firstName_gt: String
  firstName_gte: String
  firstName_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_not: String
  firstName_not_contains: String
  firstName_not_ends_with: String
  firstName_not_in: [String!]
  firstName_not_starts_with: String
  firstName_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  lastName: String
  lastName_contains: String
  lastName_ends_with: String
  lastName_gt: String
  lastName_gte: String
  lastName_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_not: String
  lastName_not_contains: String
  lastName_not_ends_with: String
  lastName_not_in: [String!]
  lastName_not_starts_with: String
  lastName_starts_with: String
  NOT: [PlayerWhereInput!]
  number: Int
  number_gt: Int
  number_gte: Int
  number_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_not: Int
  number_not_in: [Int!]
  OR: [PlayerWhereInput!]
  teams_every: TeamWhereInput
  teams_none: TeamWhereInput
  teams_some: TeamWhereInput
}

input PlayerWhereUniqueInput {
  id: ID
}

type Query {
  link(where: LinkWhereUniqueInput!): Link
  links(after: String, before: String, first: Int, last: Int, orderBy: LinkOrderByInput, skip: Int, where: LinkWhereInput): [Link!]!
  linksConnection(after: String, before: String, first: Int, last: Int, orderBy: LinkOrderByInput, skip: Int, where: LinkWhereInput): LinkConnection!
  player(where: PlayerWhereUniqueInput!): Player
  players(after: String, before: String, first: Int, last: Int, orderBy: PlayerOrderByInput, skip: Int, where: PlayerWhereInput): [Player!]!
  playersConnection(after: String, before: String, first: Int, last: Int, orderBy: PlayerOrderByInput, skip: Int, where: PlayerWhereInput): PlayerConnection!
  team(where: TeamWhereUniqueInput!): Team
  teams(after: String, before: String, first: Int, last: Int, orderBy: TeamOrderByInput, skip: Int, where: TeamWhereInput): [Team!]!
  teamsConnection(after: String, before: String, first: Int, last: Int, orderBy: TeamOrderByInput, skip: Int, where: TeamWhereInput): TeamConnection!
  user(where: UserWhereUniqueInput!): User
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
  usersConnection(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): UserConnection!
  vote(where: VoteWhereUniqueInput!): Vote
  votes(after: String, before: String, first: Int, last: Int, orderBy: VoteOrderByInput, skip: Int, where: VoteWhereInput): [Vote!]!
  votesConnection(after: String, before: String, first: Int, last: Int, orderBy: VoteOrderByInput, skip: Int, where: VoteWhereInput): VoteConnection!
}

type Team {
  id: ID!
  name: String!
  players(after: String, before: String, first: Int, last: Int, orderBy: PlayerOrderByInput, skip: Int, where: PlayerWhereInput): [Player!]
}

type TeamConnection {
  aggregate: AggregateTeam!
  edges: [TeamEdge!]!
  pageInfo: PageInfo!
}

input TeamCreateInput {
  id: ID
  name: String!
  players: PlayerCreateManyWithoutTeamsInput
}

input TeamCreateManyWithoutPlayersInput {
  connect: [TeamWhereUniqueInput!]
  create: [TeamCreateWithoutPlayersInput!]
}

input TeamCreateWithoutPlayersInput {
  id: ID
  name: String!
}

type TeamEdge {
  cursor: String!
  node: Team!
}

enum TeamOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input TeamScalarWhereInput {
  AND: [TeamScalarWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [TeamScalarWhereInput!]
  OR: [TeamScalarWhereInput!]
}

input TeamUpdateInput {
  name: String
  players: PlayerUpdateManyWithoutTeamsInput
}

input TeamUpdateManyDataInput {
  name: String
}

input TeamUpdateManyMutationInput {
  name: String
}

input TeamUpdateManyWithoutPlayersInput {
  connect: [TeamWhereUniqueInput!]
  create: [TeamCreateWithoutPlayersInput!]
  delete: [TeamWhereUniqueInput!]
  deleteMany: [TeamScalarWhereInput!]
  disconnect: [TeamWhereUniqueInput!]
  set: [TeamWhereUniqueInput!]
  update: [TeamUpdateWithWhereUniqueWithoutPlayersInput!]
  updateMany: [TeamUpdateManyWithWhereNestedInput!]
  upsert: [TeamUpsertWithWhereUniqueWithoutPlayersInput!]
}

input TeamUpdateManyWithWhereNestedInput {
  data: TeamUpdateManyDataInput!
  where: TeamScalarWhereInput!
}

input TeamUpdateWithoutPlayersDataInput {
  name: String
}

input TeamUpdateWithWhereUniqueWithoutPlayersInput {
  data: TeamUpdateWithoutPlayersDataInput!
  where: TeamWhereUniqueInput!
}

input TeamUpsertWithWhereUniqueWithoutPlayersInput {
  create: TeamCreateWithoutPlayersInput!
  update: TeamUpdateWithoutPlayersDataInput!
  where: TeamWhereUniqueInput!
}

input TeamWhereInput {
  AND: [TeamWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  players_every: PlayerWhereInput
  players_none: PlayerWhereInput
  players_some: PlayerWhereInput
}

input TeamWhereUniqueInput {
  id: ID
  name: String
}

type User {
  createdAt: DateTime!
  email: String!
  id: ID!
  links(after: String, before: String, first: Int, last: Int, orderBy: LinkOrderByInput, skip: Int, where: LinkWhereInput): [Link!]
  name: String!
  password: String!
  updatedAt: DateTime!
  votes(after: String, before: String, first: Int, last: Int, orderBy: VoteOrderByInput, skip: Int, where: VoteWhereInput): [Vote!]
}

type UserConnection {
  aggregate: AggregateUser!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

input UserCreateInput {
  email: String!
  id: ID
  links: LinkCreateManyWithoutPostedByInput
  name: String!
  password: String!
  votes: VoteCreateManyWithoutUserInput
}

input UserCreateOneWithoutLinksInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutLinksInput
}

input UserCreateOneWithoutVotesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutVotesInput
}

input UserCreateWithoutLinksInput {
  email: String!
  id: ID
  name: String!
  password: String!
  votes: VoteCreateManyWithoutUserInput
}

input UserCreateWithoutVotesInput {
  email: String!
  id: ID
  links: LinkCreateManyWithoutPostedByInput
  name: String!
  password: String!
}

type UserEdge {
  cursor: String!
  node: User!
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserUpdateInput {
  email: String
  links: LinkUpdateManyWithoutPostedByInput
  name: String
  password: String
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  email: String
  name: String
  password: String
}

input UserUpdateOneRequiredWithoutVotesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutVotesInput
  update: UserUpdateWithoutVotesDataInput
  upsert: UserUpsertWithoutVotesInput
}

input UserUpdateOneWithoutLinksInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutLinksInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutLinksDataInput
  upsert: UserUpsertWithoutLinksInput
}

input UserUpdateWithoutLinksDataInput {
  email: String
  name: String
  password: String
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutVotesDataInput {
  email: String
  links: LinkUpdateManyWithoutPostedByInput
  name: String
  password: String
}

input UserUpsertWithoutLinksInput {
  create: UserCreateWithoutLinksInput!
  update: UserUpdateWithoutLinksDataInput!
}

input UserUpsertWithoutVotesInput {
  create: UserCreateWithoutVotesInput!
  update: UserUpdateWithoutVotesDataInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  links_every: LinkWhereInput
  links_none: LinkWhereInput
  links_some: LinkWhereInput
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: String
  password_contains: String
  password_ends_with: String
  password_gt: String
  password_gte: String
  password_in: [String!]
  password_lt: String
  password_lte: String
  password_not: String
  password_not_contains: String
  password_not_ends_with: String
  password_not_in: [String!]
  password_not_starts_with: String
  password_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
  votes_every: VoteWhereInput
  votes_none: VoteWhereInput
  votes_some: VoteWhereInput
}

input UserWhereUniqueInput {
  email: String
  id: ID
}

type Vote {
  id: ID!
  link: Link!
  user: User!
}

type VoteConnection {
  aggregate: AggregateVote!
  edges: [VoteEdge!]!
  pageInfo: PageInfo!
}

input VoteCreateInput {
  id: ID
  link: LinkCreateOneWithoutVotesInput!
  user: UserCreateOneWithoutVotesInput!
}

input VoteCreateManyWithoutLinkInput {
  connect: [VoteWhereUniqueInput!]
  create: [VoteCreateWithoutLinkInput!]
}

input VoteCreateManyWithoutUserInput {
  connect: [VoteWhereUniqueInput!]
  create: [VoteCreateWithoutUserInput!]
}

input VoteCreateWithoutLinkInput {
  id: ID
  user: UserCreateOneWithoutVotesInput!
}

input VoteCreateWithoutUserInput {
  id: ID
  link: LinkCreateOneWithoutVotesInput!
}

type VoteEdge {
  cursor: String!
  node: Vote!
}

enum VoteOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input VoteScalarWhereInput {
  AND: [VoteScalarWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [VoteScalarWhereInput!]
  OR: [VoteScalarWhereInput!]
}

input VoteUpdateInput {
  link: LinkUpdateOneRequiredWithoutVotesInput
  user: UserUpdateOneRequiredWithoutVotesInput
}

input VoteUpdateManyWithoutLinkInput {
  connect: [VoteWhereUniqueInput!]
  create: [VoteCreateWithoutLinkInput!]
  delete: [VoteWhereUniqueInput!]
  deleteMany: [VoteScalarWhereInput!]
  disconnect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutLinkInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutLinkInput!]
}

input VoteUpdateManyWithoutUserInput {
  connect: [VoteWhereUniqueInput!]
  create: [VoteCreateWithoutUserInput!]
  delete: [VoteWhereUniqueInput!]
  deleteMany: [VoteScalarWhereInput!]
  disconnect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutUserInput!]
}

input VoteUpdateWithoutLinkDataInput {
  user: UserUpdateOneRequiredWithoutVotesInput
}

input VoteUpdateWithoutUserDataInput {
  link: LinkUpdateOneRequiredWithoutVotesInput
}

input VoteUpdateWithWhereUniqueWithoutLinkInput {
  data: VoteUpdateWithoutLinkDataInput!
  where: VoteWhereUniqueInput!
}

input VoteUpdateWithWhereUniqueWithoutUserInput {
  data: VoteUpdateWithoutUserDataInput!
  where: VoteWhereUniqueInput!
}

input VoteUpsertWithWhereUniqueWithoutLinkInput {
  create: VoteCreateWithoutLinkInput!
  update: VoteUpdateWithoutLinkDataInput!
  where: VoteWhereUniqueInput!
}

input VoteUpsertWithWhereUniqueWithoutUserInput {
  create: VoteCreateWithoutUserInput!
  update: VoteUpdateWithoutUserDataInput!
  where: VoteWhereUniqueInput!
}

input VoteWhereInput {
  AND: [VoteWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  link: LinkWhereInput
  NOT: [VoteWhereInput!]
  OR: [VoteWhereInput!]
  user: UserWhereInput
}

input VoteWhereUniqueInput {
  id: ID
}
